typeof和instanceof
http://jartto.wang/2019/01/17/js-typeof/
typeof:
判断参数是什么类型，返回值有：
number, string, boolean, function, object, undefined
* 基本类型：除null以外，均返回正确的结果；
* 引用类型：除function以外，均返回objet类型；
* null：返回object类型；
* function：返回function类型。
扩展应用：可以用来判断某个变量是否存在。
if(!a) { console.log(‘error’) } //Uncaught ReferenceError: a is not defined
改成用typeof：
if(typeof a === ‘undefined’) {
console.log(‘error’);
}. //避免代码异常，严谨
注意：let和const会变成「暂时性死区」：
typeof a;// ReferenceError
let a;
由于typeof对应用类型来说只能统一返回object，所以需要instanceof来检测一个对象是不是另一个对象的实例。

instanceof:
instanced 用来判断A是否为B的实例。
instanceof (A,B) = {
    var L = A.__proto__;
    var R = B.prototype;
    if(L === R) {
        //A的内部属性__proto__指向B的原型对象
        return true;
    }
    return false;
}
以上过程可以以看出，当A的__proto__指向B的prototype时，就认为A是B的实例。
[] instanceof Array; //true
({}) instanceof Object;//true
new Date() instanceof Date;//true
[] instanceof Object //true

function Person(){};
new Person() instanceof Person; // true
new Person instanceof Object; // true
继承：
function Parent(){};
function Child(){};
function Other(){};

Child.prototype = new Parent();
let child = new Child();

child instanceof Child; // true
child instanceof Parent; // true
child instanceof Object; // true
child instanceof Other; // false
关键理解一行代码即可：
Parent.prototype.__proto__ = Object.prototype

扩展：
[]、Array、Object之间的关系：
通过instanceof能够判断出，(->表示指向）
[].proto -> Array.prototype => Array.prototype.proto -> Object.prototype
=> Object.prototype.proto -> null，原型链结束。
[]、Array、Object形成的原型链如下图所示：
￼
instanceof只能用来判断两个对象是否属于实例关系，而不能判断对象实例具体属于什么类型。
例题1:
如何判断一个变量是否为数组？ // 不要用 typeof 判断
typeof []; // object

// 这是es3的规定，但是这必须假定只有一个全局执行环境
[] instanceof Array; // true

// ES5的标准
Array.isArray([]); // true
所以，要通过 instanceof 判断，或者 isArray 来判断。

例题2:
var name = 'World!';
(function () {
    if (typeof name === 'undefined') {
        var name = 'Jartto';
        console.log('Hi~ ' + name);
    } else {
        console.log('Hello ' + name);
    }
})();
这里用var，要注意变量提升代码执行相当于：
var name = 'World!';
(function () {
    var name;
    if (typeof name === 'undefined') {
        var name = 'Jartto';
        console.log('Hi~ ' + name);
    } else {
        console.log('Hello ' + name);
    }
})();
typeof name 就等于 undefined，所以输出结果为 Hi~Jartto。
如果换成let name = ‘Jartto’; 结果为“Hello World!”
（完）











