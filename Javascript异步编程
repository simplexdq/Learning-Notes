Javascript异步编程:
http://caibaojian.com/es6/async.html

Javascript语言的执行环境是"单线程"（single thread）。
所谓"单线程"，就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。
这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。
为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）。

同步模式
就是上一段的模式，后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的；

异步（回调；Promise；事件监听；订阅）
每一个任务有一个或多个回调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的。
浏览器端：耗时很长的操作都应该异步执行，避免浏览器失去响应 -> Ajax操作;
服务器端: “异步模式"甚至是唯一的模式，因为执行环境是单线程的，如果允许同步执行所有http请求，服务器性能会急剧下降，很快就会失去响应。
所谓"异步"，简单说就是一个任务分成两段，先执行第一段，然后转而执行其他任务，等做好了准备，再回过头执行第二段。
比如，有一个任务是读取文件进行处理，任务的第一段是向操作系统发出请求，要求读取文件。然后，程序执行其他任务，等到操作系统返回文件，再接着执行任务的第二段（处理文件）。这种不连续的执行，就叫做异步。
相应地，连续的执行就叫做同步。由于是连续执行，不能插入其他任务，所以操作系统从硬盘读取文件的这段时间，程序只能干等着。

1.JS 异步编程进化史：callback -> promise -> generator -> async + await
2.async/await 函数的实现，就是将 Generator 函数和自动执行器，包装在一个函数里。
3.async/await可以说是异步终极解决方案了。
(1) async/await函数相对于Promise，优势体现在：
* 处理 then 的调用链，能够更清晰准确的写出代码
* 并且也能优雅地解决回调地狱问题。
当然async/await函数也存在一些缺点，因为 await 将异步代码改造成了同步代码，如果多个异步代码没有依赖性却使用了 await 会导致性能上的降低，代码没有依赖性的话，完全可以使用 Promise.all 的方式。

1.  回调：
f1() -> f2(): f2要等f1的执行结果，则可以把f2写成f1的回调函数；
缺点：容易形成回调地狱，而且一个函数只能有一个回调函数。

2.  时间监听：
事件驱动模式。任务的执行不取决于代码的顺序，而是取决于事件是否发生。
f1.on(‘done’, f2);
function f1() {
    setTimeout(function () {
        f1.trigger('done');
    },2000)
}
优点：可以绑定多个事件，每个事件可以指定多个回调函数，而且可以去耦合，有利于实现模块化。
缺点：整个程序都要变成驱动型，运行流程会变的不清晰。

3.  发布/订阅：
把事件理解成信号。某个任务执行完成，就向信号中心发布（publish）一个信号，其他任务可以在信号中心订阅信号，从而知道自己什么时候可以开始执行。publish subscribe pattern：
jQuery.subscribe(“done”,f2); //f2在信号中心jQuery订阅“done”信号
function f1() {
setTimeout(function()) {
jQuery.publish(“done”);  //f1执行完毕向jQuery信号中心发送执行完毕的信号，从而引发f2的执行
},1000);
}
jQuery.unsubscribe(“done”,f2);//f2执行完任务之后可以取消订阅

4.  ES6 Promise：（具体查看专题篇）
目的：为异步编程提供统一接口；
思想：每一个异步任务返回一个promise对象，promise对象本身拥有then方法，可以用来回调指定函数。
优点：如果一个任务已经完成，再去添加回调函数，该回调函数会立即执行，从而不用担心错过某个事件或者信号；这是前三个方法所没有的功能；
缺点：编写理解难。

5.  ES6 生成器Generators/yield：
可以看成状态机，内部封装了多个动态。
特点：可暂停，yield为暂停，nexT()方法可启动；
	   暂停时返回的是yield之后的表达式的执行结果；
	   yield本身是没有返回值，或者说返回undefined；
	   next方法可以带参数，会被当作上一个yield表达式的返回值。
例1
function*  fib(max) {
    var t,
        a = 0,
        b = 1,
        n = 0;
    while(n < max) {
        yield a;
        [a, b] = [b, a + b];
        n++;
    }
    return;
}  
var f = fib(5);
f.next(); // {value: 0, done: false}；调用next6次后done为true
例2
function *foo(x) {
  let y = 2 * (yield (x + 1))
  let z = yield (y / 3)
  return (x + y + z)
}
let it = foo(5)
console.log(it.next())   // => {value: 6, done: false}
console.log(it.next(12)) // => {value: 8, done: false}
console.log(it.next(13)) // => {value: 42, done: true}
手动迭代Generator 函数很麻烦，实现逻辑有点绕，而实际开发一般会配合 co 库去使用。co是一个为Node.js和浏览器打造的基于生成器的流程控制工具，借助于Promise，你可以使用更加优雅的方式编写非阻塞代码。
安装co库只需：npm install co

5.  ES7 async/await：
http://www.ruanyifeng.com/blog/2015/05/async.html
async函数是Generator函数的语法糖。
与Generator相比，写法上：async 代替 *, await代替yield，仅此而已。
var fs = require('fs');
var readFile = function (fileName) {
    return new Promise(function(resolve,reject) {
        fs.readFile(fileName, function(error, data) {
            if(error) reject(error);
            resolve(data);
        })
    })
}
//Generator写法
var gen = function* () {
    var f1 = yield readFile('/etc/fstab');
    var f2 = yield readFile('etc/shells');
    console.log(f1.toString());
    console.log(f2.toString());
}
//async写法
var asyncReadFile = async function () {
    var f1 = await readFile('/etc/fstab');
    var f2 = await readFile('/etc/shells');
    console.log(f1.toString());
    console.log(f2.toString());
}
对比Generator的优点：
内置执行器：Generator函数的执行必须靠执行器（一直next()），所以有co函数库，而async函数只需要一行。
更好的语义：表达式更清楚。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。
更广的适用性：co数据库约定，yield命令后面只能是thunk函数或者promise对象，而async函数的await命令后面，可以跟Promise对象和原始类型的值（Number，String，Boolean，但这时相当于同步操作）。

async的实现就是把Generator函数和自动执行器包装在一个函数里。
返回一个Promise对象，并可以调用then方法添加回调函数。当函数执行时，一旦遇到await会先返回，等到出发的异步操作完成，再继续执行函数体内后面紧跟的语句。
await只能用在async函数中，用在普通函数中会出错。
async function dbFuc(db) {
  let docs = [{}, {}, {}];

  // 可能得到错误结果
  docs.forEach(async function (doc) {
    await db.post(doc);
  });
} // dp.post是并发执行，而不是继发执行，所以用await可能会出错。
//改成用for循环
async function dbFuc(db) {
  let docs = [{}, {}, {}];

  for (let doc of docs) {
    await db.post(doc);
  }
}
另外如果想要多个请求并发执行，可以使用promise.all方法
async function dbFuc(db) {
  let docs = [{}, {}, {}];
  let promises = docs.map((doc) => db.post(doc));

  let results = await Promise.all(promises);
  console.log(results);
}

// 或者使用下面的写法

async function dbFuc(db) {
  let docs = [{}, {}, {}];
  let promises = docs.map((doc) => db.post(doc));

  let results = [];
  for (let promise of promises) {
    results.push(await promise);
  }
  console.log(results);
}
（完）













